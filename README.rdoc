= KingPlaceholder

This gem was extraced from SalesKing where it handles placeholders substitution
for user supplied email-, text- and export- templates.

Substitutes [placeholders] in text strings. Placeholders are declared in a
class by 'has_placeholders' method. Afterwards any strings with plastr = "Hey [name] your address is [email]"
                                                                     u = User.new :name=> "theo", :email => 'a@theo.com'
                                                                     u.expand_placeholders(str)
                                                                     => "Hey Theo your address is a@theo.com"ceholders
can be parsed in the scope of the model.

Define the available methods in your class

  class User
    include KingPlaceholder
    has_many :comments
    has_one :company
    has_placeholders :firstname, :email
  end
  class Comment
    include KingPlaceholder
    has_placeholders :text
  end

Use placeholder names in square brackets:

  str = "Hey [name] your address is [email]"
  u = User.new( name: "theo", email: 'a@theo.com')
  u.expand_placeholders(str)
  => "Hey Theo your address is a@theo.com"

Handle collections

  @user.expand_placeholders("[comments][text][/comments]")
  => All comment texts

  @user.expand_placeholders("[comments.1.text]")
  => First comment text

Handle relations
  @user.expand_placeholders("[company.name]")
  => MyCompany

== TODO

This gems still relies on gem king_views with king_format, for money, date
formatting. We will outsource king_format into its own gem and remove more
SalesKing internal dependencies.

== Installation

Add this line to your application's Gemfile:

    gem 'king_placeholder'

Or install it yourself as:

    $ gem install king_placeholder

== Usage

See specs

== Contributing

1. Fork it
2. Create your feature branch (`git checkout -b my-new-feature`)
3. Commit your changes (`git commit -am 'Added some feature'`)
4. Push to the branch (`git push origin my-new-feature`)
5. Create new Pull Request
